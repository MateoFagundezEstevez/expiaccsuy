import streamlit as st
import pandas as pd
import numpy as np

# Cargar los datos localmente
afinidad_df = pd.read_csv("afinidad_producto_pa√≠s.csv", encoding="ISO-8859-1")
mercados_df = pd.read_csv("mercados.csv", encoding="ISO-8859-1")

# Definir la funci√≥n principal para calcular la afinidad
def calcular_afinidad(pais, afinidad_producto, mercados_df):
    # Obtener las m√©tricas del pa√≠s
    pais_data = mercados_df[mercados_df['Pa√≠s'] == pais].iloc[0]
    
    # Definir los indicadores clave
    indicadores = {
        'Facilidad para hacer negocios': pais_data['Facilidad Negocios (WB 2019)'],
        'Tama√±o del Mercado Total (Millones USD)': pais_data['Tama√±o del Mercado Total (Millones USD)'],
        'Crecimiento Anual PIB (%)': pais_data['Crecimiento Anual PIB (%)'],
        'Crecimiento Importaciones (%)': pais_data['Crecimiento Importaciones (%)'],
        'Performance Log√≠stica (LPI 2023)': pais_data['Log√≠stica (LPI 2023)'],
        'Distancia a Uruguay (km)': pais_data['Distancia a Uruguay (km)']
    }

    # Normalizar las m√©tricas
    max_values = {
        'Facilidad para hacer negocios': mercados_df['Facilidad Negocios (WB 2019)'].max(),
        'Tama√±o del Mercado Total (Millones USD)': mercados_df['Tama√±o del Mercado Total (Millones USD)'].max(),
        'Crecimiento Anual PIB (%)': mercados_df['Crecimiento Anual PIB (%)'].max(),
        'Crecimiento Importaciones (%)': mercados_df['Crecimiento Importaciones (%)'].max(),
        'Performance Log√≠stica (LPI 2023)': mercados_df['Log√≠stica (LPI 2023)'].max(),
        'Distancia a Uruguay (km)': mercados_df['Distancia a Uruguay (km)'].max()
    }

    min_values = {
        'Facilidad para hacer negocios': mercados_df['Facilidad Negocios (WB 2019)'].min(),
        'Tama√±o del Mercado Total (Millones USD)': mercados_df['Tama√±o del Mercado Total (Millones USD)'].min(),
        'Crecimiento Anual PIB (%)': mercados_df['Crecimiento Anual PIB (%)'].min(),
        'Crecimiento Importaciones (%)': mercados_df['Crecimiento Importaciones (%)'].min(),
        'Performance Log√≠stica (LPI 2023)': mercados_df['Log√≠stica (LPI 2023)'].min(),
        'Distancia a Uruguay (km)': mercados_df['Distancia a Uruguay (km)'].min()
    }

    # Normalizar cada indicador
    for indicador, valor in indicadores.items():
        if indicador == 'Distancia a Uruguay (km)':
            indicadores[indicador] = 1 - (valor - min_values[indicador]) / (max_values[indicador] - min_values[indicador])
        else:
            indicadores[indicador] = (valor - min_values[indicador]) / (max_values[indicador] - min_values[indicador])

    # Ponderar las m√©tricas
    pesos = {
        'Facilidad para hacer negocios': 0.2,
        'Tama√±o del Mercado Total (Millones USD)': 0.3,
        'Crecimiento Anual PIB (%)': 0.2,
        'Crecimiento Importaciones (%)': 0.1,
        'Performance Log√≠stica (LPI 2023)': 0.1,
        'Distancia a Uruguay (km)': 0.1
    }

    puntaje_base = sum(indicadores[indicador] * pesos[indicador] for indicador in indicadores)

    # A√±adir variaci√≥n por producto (simulada)
    variacion_producto = np.random.uniform(-0.05, 0.05)  # Ajuste aleatorio entre -5% y +5%
    puntaje_final = puntaje_base + variacion_producto

    # Escalar el puntaje final a un rango de 0 a 100
    puntaje_final = max(0, min(100, puntaje_final * 100))  # Escalar y limitar el puntaje

    return puntaje_final

# Funci√≥n principal para recomendar mercados
def recomendar_mercados(afinidad_producto, mercados_df, extra_global=0):
    # Lista de pa√≠ses de Latinoam√©rica
    latinoamerica = [
        "Argentina", "Brasil", "Paraguay", "Chile", "Bolivia", "Per√∫", "Colombia", "Ecuador", 
        "M√©xico", "Panam√°", "Costa Rica", "Rep√∫blica Dominicana", "Guatemala", "El Salvador", 
        "Honduras", "Nicaragua", "Venezuela", "Uruguay", "Cuba", "Hait√≠", "Puerto Rico", "Belice", 
        "Jamaica", "Trinidad y Tobago", "Barbados", "Guyana", "Surinam"
    ]

    # Clasificar regi√≥n
    mercados_df['Regi√≥n'] = mercados_df['Pa√≠s'].apply(lambda x: 'Latinoam√©rica' if x in latinoamerica else 'Resto del Mundo')

    # Unir datasets
    df_completo = pd.merge(afinidad_producto[['Pa√≠s', 'Afinidad']], mercados_df, on='Pa√≠s', how='inner')

    # Calcular puntajes ponderados
    df_completo['Puntaje'] = df_completo['Pa√≠s'].apply(lambda x: calcular_afinidad(x, afinidad_producto, mercados_df))

    # Seleccionar mercados recomendados
    top_latam = df_completo[df_completo['Regi√≥n'] == 'Latinoam√©rica'].sort_values(by='Puntaje', ascending=False).head(3)
    top_global = df_completo[df_completo['Regi√≥n'] == 'Resto del Mundo'].sort_values(by='Puntaje', ascending=False).head(2 + extra_global)

    df_recomendado = pd.concat([top_latam, top_global])

    # Fundamentos
    recomendaciones = []
    for index, row in df_recomendado.iterrows():
        fundamento = (
            f"**üåç Mercado recomendado: {row['Pa√≠s']} ({row['Regi√≥n']})**\n\n"
            f"- **Afinidad del producto**: {row['Afinidad']}\n"
            f"- **Tama√±o del Mercado Total**: {row['Tama√±o del Mercado Total (Millones USD)']}\n"
            f"- **Facilidad para hacer negocios**: {row['Facilidad Negocios (WB 2019)']}\n"
            f"- **Crecimiento Anual PIB**: {row['Crecimiento Anual PIB (%)']}\n\n"
            "‚úÖ Este mercado presenta condiciones favorables para exportar tu producto, considerando su afinidad, tama√±o de mercado y crecimiento econ√≥mico."
        )
        recomendaciones.append(fundamento)
    
    return df_recomendado[['Pa√≠s', 'Regi√≥n', 'Puntaje']], recomendaciones

# Configuraci√≥n de la app
st.set_page_config(page_title="Recomendador de Mercados", page_icon="üåé")

# Logo
st.image("logo_ccsuy.png", use_container_width=True)

# T√≠tulo e instrucciones
st.markdown("<h1 style='color: #3E8E41;'>Bienvenido al Recomendador de Mercados de Exportaci√≥n üåé</h1>", unsafe_allow_html=True)
st.markdown("üöÄ Selecciona tu producto y descubre los mejores mercados para exportarlo. Priorizamos Latinoam√©rica, pero puedes explorar tambi√©n el resto del mundo.")
with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona esta herramienta?"):
    st.markdown("""
    # Recomendador de Mercados de Exportaci√≥n üåé

    ## Descripci√≥n

    Este es un **Recomendador de Mercados de Exportaci√≥n** dise√±ado para ayudar a los exportadores uruguayos a identificar los mejores mercados para sus productos. La herramienta est√° basada en indicadores clave que incluyen la **afinidad del producto**, el **tama√±o del mercado**, la **facilidad para hacer negocios** y el **crecimiento econ√≥mico** de los pa√≠ses. 

    La recomendaci√≥n de mercados se prioriza primero para **Latinoam√©rica** (debido a la cercan√≠a geogr√°fica y la afinidad cultural), seguida de las mejores opciones del **resto del mundo**.

    ## ¬øC√≥mo Funciona?

    ### C√°lculo de Afinidad por Producto

    La afinidad es un puntaje de potencial estimado que se calcula para cada combinaci√≥n posible de Producto y Pa√≠s de destino. Se basa en una selecci√≥n de caracter√≠sticas clave que posee ese pa√≠s, ponderadas seg√∫n su relevancia para la oportunidad de exportaci√≥n.

    El proceso de c√°lculo para obtener el puntaje de afinidad de un Producto en un Pa√≠s es el siguiente:

    1. **Obtener las M√©tricas del Pa√≠s**: Se toman los valores espec√≠ficos que tiene ese pa√≠s para indicadores como Facilidad para hacer negocios, Tama√±o del Mercado, Crecimiento del PIB, entre otros.
    2. **Normalizar las M√©tricas**: Se convierten a una escala com√∫n (por ejemplo, de 0 a 1) para permitir su comparaci√≥n.
    3. **Ponderar las M√©tricas**: Cada puntaje normalizado se multiplica por un peso predefinido.
    4. **Sumar los Puntajes Ponderados**: Se obtiene un puntaje base, que representa la evaluaci√≥n general del potencial de mercado.
    5. **A√±adir Variaci√≥n por Producto (Simulada)**: Se ajusta el puntaje para reflejar variabilidad espec√≠fica del producto.
    6. **Escalar y Limitar el Puntaje Final**: El puntaje final se ajusta para asegurar que no exceda el m√°ximo ni sea menor que el m√≠nimo.

    Con base en estos c√°lculos, podr√°s explorar las mejores opciones para tu producto y encontrar mercados con mayores oportunidades de exportaci√≥n.
    """)

# Implementaci√≥n de la selecci√≥n de productos y pa√≠ses
# Definir los productos disponibles
productos = afinidad_df['Producto'].unique()

# Seleccionar el producto
producto_seleccionado = st.selectbox("Selecciona tu Producto", productos)

# Bot√≥n para obtener recomendaciones
if st.button("Obtener Recomendaciones de Mercados"):
    afinidad_producto = afinidad_df[afinidad_df['Producto'] == producto_seleccionado]
    recomendacion, fundamentos = recomendar_mercados(afinidad_producto, mercados_df)
    
    st.write("### Mercados Recomendados:")
    st.dataframe(recomendacion)
    
    st.write("### Fundamentos para la recomendaci√≥n:")
    for fundamento in fundamentos:
        st.markdown(fundamento)
        st.markdown("---")
    
    st.subheader("üìä Tabla de puntajes")
    st.dataframe(df_recomendado)

    # Expandible para m√°s mercados globales
    with st.expander("üîç Ver m√°s mercados del Resto del Mundo (opcional)"):
        extra_count = st.slider("¬øCu√°ntos mercados adicionales del mundo quieres ver?", min_value=1, max_value=10, value=3)
        df_ext, fundamentos_ext = recomendar_mercados(afinidad_producto, mercados_df, extra_global=extra_count)
        nuevos_globales = df_ext[~df_ext['Pa√≠s'].isin(df_recomendado['Pa√≠s']) & (df_ext['Regi√≥n'] == "Resto del Mundo")]

        for i, row in nuevos_globales.iterrows():
            st.markdown(f"**üåê {row['Pa√≠s']}** - Puntaje: {round(row['Puntaje'], 2)}")
        st.dataframe(nuevos_globales)

# Estilos
st.markdown(""" 
    <style> 
        .stButton > button { background-color: #3E8E41; color: white; font-size: 16px; } 
        .stButton > button:hover { background-color: #45a049; } 
    </style> 
""", unsafe_allow_html=True)
