import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Ruta de los archivos CSV ya subidos
afinidad_file_path = "afinidad_producto_pa√≠s.csv"
mercados_file_path = "mercados.csv"

# Funci√≥n para cargar los archivos CSV
def load_csv_file(file_path):
    try:
        return pd.read_csv(file_path, encoding='utf-8')
    except UnicodeDecodeError:
        return pd.read_csv(file_path, encoding='ISO-8859-1')

# Cargar los archivos CSV directamente desde las rutas
afinidad_df = load_csv_file(afinidad_file_path)
mercados_df = load_csv_file(mercados_file_path)

# Cargar y mostrar el logo de la C√°mara de Comercio y Servicios del Uruguay
logo_url = "camara_comercio_uruguay_logo.png"  # Aseg√∫rate de tener el archivo de logo en el directorio correcto
st.image(logo_url, width=200)  # Ajusta el tama√±o seg√∫n sea necesario
st.markdown("<h1 style='text-align: center; color: #007bff;'>üåç ¬°Descubre los Mejores Mercados para tu Producto! üöÄ</h1>", unsafe_allow_html=True)
st.markdown("**Bienvenido!** Utiliza esta herramienta para encontrar los mercados internacionales m√°s prometedores para exportar tu producto. üåü")

# Bot√≥n para mostrar/ocultar los datos de los CSV
if st.button("Mostrar Datos de los Archivos CSV üìä"):
    if afinidad_df is not None:
        st.write("### Datos de 'afinidad_producto_pa√≠s.csv' üîç")
        st.write(afinidad_df)

    if mercados_df is not None:
        st.write("### Datos de 'mercados.csv' üåê")
        st.write(mercados_df)

# Interfaz para seleccionar el producto con un t√≠tulo atractivo
producto_seleccionado = st.selectbox(
    '‚ú® Selecciona un Producto:',
    afinidad_df['Producto'].unique(),
    index=0, # Primer producto como predeterminado
)

# Filtrar los datos de afinidad por el producto seleccionado
afinidad_producto = afinidad_df[afinidad_df['Producto'] == producto_seleccionado]

# Mostrar la afinidad del producto en diferentes pa√≠ses con colores y emoji
st.write(f"üìä **Afinidad del Producto '{producto_seleccionado}' en los pa√≠ses**:")
st.write(afinidad_producto[['Pa√≠s', 'Afinidad']])

# Funci√≥n para recomendar los mejores mercados
def recomendar_mercados(afinidad_producto, mercados_df):
    # Merge para combinar los datos de afinidad y mercado
    df_completo = pd.merge(afinidad_producto[['Pa√≠s', 'Afinidad']], mercados_df, on='Pa√≠s', how='inner')

    # Calcular una puntuaci√≥n ponderada combinando los √≠ndices del mercado
    df_completo['Puntaje'] = (
        0.4 * df_completo['Afinidad'] + # Ponderaci√≥n para la afinidad
        0.3 * df_completo['Demanda esperada'] + # Ponderaci√≥n para la demanda
        0.2 * df_completo['Facilidad para hacer negocios'] + # Ponderaci√≥n para la facilidad para hacer negocios
        0.1 * df_completo['Estabilidad pol√≠tica'] # Ponderaci√≥n para la estabilidad pol√≠tica
    )

    # Ordenar por la puntuaci√≥n en orden descendente y seleccionar los 5 mejores mercados
    df_recomendado = df_completo.sort_values(by='Puntaje', ascending=False).head(5)

    # Generar los fundamentos
    recomendaciones = []
    for index, row in df_recomendado.iterrows():
        fundamento = (
            f"**Mercado recomendado: {row['Pa√≠s']}** üåü\n\n"
            f"- **Afinidad del producto con el mercado**: {row['Afinidad']}\n"
            f"- **Demanda esperada**: {row['Demanda esperada']}\n"
            f"- **Facilidad para hacer negocios**: {row['Facilidad para hacer negocios']}\n"
            f"- **Beneficios arancelarios**: {row['Beneficios arancelarios']}\n"
            f"- **Estabilidad pol√≠tica**: {row['Estabilidad pol√≠tica']}\n\n"
            "En base a estos indicadores, se recomienda este mercado debido a su alto nivel de afinidad con el producto seleccionado, su "
            "alta demanda esperada, y sus condiciones favorables para hacer negocios. Adem√°s, ofrece beneficios arancelarios competitivos "
            "y una estabilidad pol√≠tica que lo convierte en una opci√≥n segura para la exportaci√≥n. üöÄ"
        )
        recomendaciones.append(fundamento)
    
    return df_recomendado[['Pa√≠s', 'Puntaje']], recomendaciones

# Llamar a la funci√≥n para obtener las recomendaciones
mercados_recomendados, fundamentos = recomendar_mercados(afinidad_producto, mercados_df)

# T√≠tulos de las recomendaciones
st.write(f"üéØ **Los 5 mejores mercados de exportaci√≥n para el Producto '{producto_seleccionado}'**:")
st.write(mercados_recomendados)

# Mostrar los fundamentos para cada recomendaci√≥n con un toque visual
st.write(f"üìù **Fundamentos de la recomendaci√≥n**:")
for i, fundamento in enumerate(fundamentos):
    st.write(f"**{i+1}. {mercados_recomendados.iloc[i]['Pa√≠s']}** üåç")
    st.write(fundamento)
    st.write("---")  # L√≠nea separadora para mejorar la visualizaci√≥n

# Opcional: Visualizaci√≥n de la distribuci√≥n de puntajes
if st.checkbox('Mostrar Distribuci√≥n de Puntajes üìà'):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x='Pa√≠s', y='Puntaje', data=mercados_recomendados, palette='viridis')
    plt.title(f'Distribuci√≥n de Puntajes para el Producto {producto_seleccionado}')
    plt.xticks(rotation=45, ha='right')
    st.pyplot(fig)
